// Exercise 1: Bresenham’s Line Drawing Algorithm
#include <GL/glut.h>

void myinit() {
    glClear(GL_COLOR_BUFFER_BIT);
    glClearColor(0, 0, 0, 1);
    gluOrtho2D(0, 500, 0, 500);
}

void draw_pixel(int x, int y) {
    glBegin(GL_POINTS);
    glVertex2d(x, y);
    glEnd();
}

void bresenhams(int x1, int y1, int x2, int y2) {
    int dx, dy, x, y, p, incx = 1, incy = 1;
    dx = abs(x2 - x1);
    dy = abs(y2 - y1);
    if (x2 < x1) incx = -1;
    if (y2 < y1) incy = -1;
    x = x1;
    y = y1;
    if (dx > dy) {
        draw_pixel(x, y);
        p = 2 * dy - dx;
        for (int i = 0; i < dx; i++) {
            x = x + incx;
            if (p >= 0) {
                y = y + incy;
                p = p + (2 * dy - 2 * dx);
            } else {
                p = p + 2 * dy;
            }
            draw_pixel(x, y);
        }
    } else {
        draw_pixel(x, y);
        p = 2 * dx - dy;
        for (int i = 0; i < dy; i++) {
            y = y + incy;
            if (p >= 0) {
                x = x + incx;
                p = p + (2 * dx - 2 * dy);
            } else {
                p = p + 2 * dx;
            }
            draw_pixel(x, y);
        }
    }
}

void display() {
    glColor3f(1, 0, 0);
    bresenhams(20, 20, 300, 50); // Slope <1
    bresenhams(20, 20, 50, 300); // slope >1
    bresenhams(20, 20, 300, 300); // slope=1
    bresenhams(50, 300, 20, 20);  // Negative slope >1
    bresenhams(300, 50, 20, 20);  // Negative slope <1
    glFlush();
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE);
    glutInitWindowSize(500, 500);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("Bresenham's Line Drawing Algorithm");
    glutDisplayFunc(display);
    myinit();
    glutMainLoop();
    return 0;
}

// Exercise 2: Basic Geometric Operations – 2D Objects
#include <GL/glut.h>
#include<stdio.h>
#include<math.h>

float x[3][3]={{0,100,50},{0,0,50},{1,1,1}};
float r[3][3];

void myinit()
{
	glClearColor(1,1,1,0);
	gluOrtho2D(-100,500,-100,500);
}

void triangle(float x[3][3])
{
	glColor4s(1,1,1,0);
	glBegin(GL_TRIANGLES);
	glVertex2f(x[0][0],x[1][0]);
	glVertex2f(x[0][1],x[1][1]);
	glVertex2f(x[0][2],x[1][2]);
	glEnd();
}

void matrixmul(float mul[3][3])
{
	for(int i=0;i<3;i++)
		for(int j=0;j<3;j++)
		{
			r[i][j]=0;
			for(int k=0;k<3;k++)
				r[i][j]=r[i][j]+mul[i][k]*x[k][j];
		}
}

void translation()
{
	float t[3][3]={{1,0,100},{0,1,0},{0,0,1}};
	printf("Enter the values of tx and ty:");
	scanf("%f%f",&t[0][2],&t[1][2]);
	matrixmul(t);
	triangle(r);
}

void scaling()
{
	float s[3][3]={{1,0,0},{0,1,0},{0,0,1}};
	printf("Enter the values of sx and sy:");
	scanf("%f %f",&s[0][0],&s[1][1]);
	matrixmul(s);
	triangle(r);
}

void rotation()
{
	float theta=0;
	printf("Enter the angle:");
	scanf("%f",&theta);
	float angle=theta *3.14/180;
	float cosx=cos(angle);
	float sinx=sin(angle);
	float rr[3][3]={{cosx,-sinx,0},{sinx,cosx,0},{0,0,1}};
	matrixmul(rr);
	triangle(r);
}

void displayMe()
{
	glClear(GL_COLOR_BUFFER_BIT);
	glColor3d(1,0,0);
	int ch;
	while(1){
		printf("Enter the choice\n0. Normal triangle\n1. Translation\n2. Scaling\n3. Rotation\n4. Exit\n");
		scanf("%d",&ch);
		glColor3d(1,1,1);
		switch(ch)
		{
			case 0:
				triangle(x);
				break;
			case 1:
				 translation();
				break;
			case 2:
				scaling();
				break;
			case 3:
				rotation();
				break;
			case 4:
				exit(0);
			default:
			printf("Enter a valid choice");
		}
		glColor3d(1,0,0);
		triangle(x);
		glFlush();
	}
}


int main(int argc, char** argv)
{
	glutInit(&argc,argv);
	glutInitDisplayMode(GLUT_SINGLE);
	glutInitWindowSize(500,500);
	glutCreateWindow("Line drawing algorithm");
	myinit();
	glutDisplayFunc(displayMe);
	glutMainLoop();
	return 0;
}

// Exercise 3: Basic Geometric Operations on 3D Object
#include <GL/glut.h>
#include <stdlib.h>
#include <stdio.h>

typedef float point[3];
point v[] = {{0.0, 0.0, 1.0}, {0.0, 1.0, 0.0}, {-1.0, -1.0, 0.0}, {1.0, -1.0, 0.0}};
int n;

void triangle(point a, point b, point c) {
    glBegin(GL_TRIANGLES);
    glVertex3fv(a);
    glVertex3fv(b);
    glVertex3fv(c);
    glEnd();
}

void divide_tri(point a, point b, point c, int m) {
    point v1, v2, v3;
    int j;
    if (m > 0) {
        for (j = 0; j < 3; j++) v1[j] = (a[j] + b[j]) / 2;
        for (j = 0; j < 3; j++) v2[j] = (a[j] + c[j]) / 2;
        for (j = 0; j < 3; j++) v3[j] = (b[j] + c[j]) / 2;
        divide_tri(a, v1, v2, m - 1);
        divide_tri(c, v2, v3, m - 1);
        divide_tri(b, v3, v1, m - 1);
    } else triangle(a, b, c);
}

void tetrahedron(int m) {
    glColor3f(1.0, 0.0, 0.0);
    divide_tri(v[0], v[1], v[2], m);
    glColor3f(0.0, 0.0, 0.0);
    divide_tri(v[3], v[2], v[1], m);
    glColor3f(0.0, 1.0, .0);
    divide_tri(v[0], v[3], v[1], m);
    glColor3f(0.0, 0.0, 1.0);
    divide_tri(v[0], v[2], v[3], m);
}

void display() {
    tetrahedron(n);
    glFlush();
}

void myinit() {
    glClearColor(1.0, 1.0, 1.0, 1.0);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glOrtho(-2.0, 2.0, -2.0, 2.0, -2.0, 2.0);
}

int main(int argc, char **argv) {
    printf("\nEnter the number of recursive steps you want");
    scanf("%d", &n);
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowSize(500, 500);
    glutCreateWindow("3D Geometric Operations");
    glutDisplayFunc(display);
    myinit();
    glEnable(GL_DEPTH_TEST);
    glutMainLoop();
    return 0;
}

// Exercise 4: 2D Transformation on Basic Objects

#include <GL/glut.h>
#include <stdio.h>

void init()
{
    glClearColor(1,1,1,0);
    gluOrtho2D(-500,500,-500,500);
}

void drawTriangle()
{
    glBegin(GL_POLYGON);
    glVertex2f(100,100);
    glVertex2f(200,100);
    glVertex2f(150,150);
    glEnd();
}

void translate()
{
    glPushMatrix();
    glTranslated(100,0,0);
    drawTriangle();
    glPopMatrix();
}

void rotate()
{
    glPushMatrix();
    glRotated(45,0,0,1);
    drawTriangle();
    glPopMatrix();
}

void fixed_point_rotate()
{
    glColor3f(1,1,0);
    glPushMatrix();
    glTranslated(100,100,0);
    glRotated(45,0,0,1);
    glTranslated(-100,-100,0);
    drawTriangle();
    glPopMatrix();
}

void scale()
{
    glPushMatrix();
    glScaled(2,2,1);
    drawTriangle();
    glPopMatrix();
}

void fixed_point_scale()
{
    glColor3f(1,1,0);
    glPushMatrix();
    glTranslated(100,100,0);
    glScaled(2,2,1);
    glTranslated(-100,-100,0);
    drawTriangle();
    glPopMatrix();
}

void menu_function(int ch)
{
    switch(ch)
    {
        case 1:
            translate();
            break;
        case 2:
            rotate();
            break;
        case 3:
            fixed_point_rotate();
            break;
        case 4:
            scale();
            break;
        case 5:
            fixed_point_scale();
            break;
        default:
            exit(0);
    }    
}

void display()
{
    glClear(GL_COLOR_BUFFER_BIT);
    glClearColor(1,1,1,0);    
    glColor3f(1,0,0);
    drawTriangle();
    glFlush();
}

int main(int argc, char** argv)
{
    glutInit(&argc,argv);
    glutInitDisplayMode(GLUT_SINGLE);
    glutInitWindowSize(500,500);
    glutCreateWindow("2D transformation");
    init();
    glutCreateMenu(menu_function);
    glutAddMenuEntry("Translate",1);
    glutAddMenuEntry("Rotate about origin",2);
    glutAddMenuEntry("Rotate about fixed point",3);
    glutAddMenuEntry("Scale about origin",4);
    glutAddMenuEntry("Scale about fixed point",5);
    glutAddMenuEntry("Exit",6);
    glutAttachMenu(GLUT_RIGHT_BUTTON);
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}



#Program 7

import cv2
import matplotlib.pyplot as plt
image=cv2.imread('index.jpg')
image_mat=cv2.cvtColor(image,cv2.COLOR_BGR2RGB)
ht,wd,c=image.shape
midy=ht//2
midx=wd//2
plt.imshow(image_mat)
tl=image_mat[:midy,:midx]
tr=image_mat[:midy,midx:]
bl=image_mat[midy:,:midx]
br=image_mat[midy:,midx:]
fig,axs=plt.subplots(2,2)
l_title=["Top left","Top right","bottom left","bottom right"]
l_var=[tl,tr,bl,br]
k=0
for i in range(2):
    for j in range(2):
       axs[i,j].imshow(l_var[k])
       axs[i,j].set_title(l_title[k])
       axs[i,j].axis("off")
       k+=1
       

#plt.axis("off")
plt.show()


#Program 8

import cv2
import numpy as np
import matplotlib.pyplot as plt
image=cv2.imread("index.jpg")
image_mat=cv2.cvtColor(image,cv2.COLOR_BGR2RGB)
ht,wd,c=image.shape
center=(wd/2,ht/2)

trans=np.float32([[1,0,50],[0,1,50]])
scale=np.float32([[2,0,0],[0,2,0]])
rotate=cv2.getRotationMatrix2D(center,30,1)

im_t=cv2.warpAffine(image_mat,trans,(wd+50,ht+50))
im_s=cv2.warpAffine(image_mat,scale,(wd*2,ht*2))
im_r=cv2.warpAffine(image_mat,rotate,(wd,ht))
fig,axs=plt.subplots(2,2)
l_title=["original","translated","scaled","rotated"]
l_var=[image_mat,im_t,im_s,im_r]
k=0
for i in range(2):
    for j in range(2):
       axs[i,j].imshow(l_var[k])
       axs[i,j].set_title(l_title[k])
       #axs[i,j].axis("off")
       k+=1
plt.show()

#Program 9

import cv2
from matplotlib import pyplot as plt


image = cv2.imread('/CMS_0441.JPG')
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

edges = cv2.Canny(gray, 100, 200)


image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
edges_rgb = cv2.cvtColor(edges, cv2.COLOR_GRAY2RGB)


images = [image_rgb, edges_rgb]
titles = ["Original", "Canny Edge Detection"]

fig, axs = plt.subplots(1, 2, figsize=(10, 5))
for ax, img, title in zip(axs, images, titles):
    ax.imshow(img)
    ax.set_title(title)
    ax.axis('off')

plt.show()

#Program 10

import cv2
import numpy as np
import matplotlib.pyplot as plt
from skimage.metrics import structural_similarity as ssim

image = cv2.imread('/CMS_0441.JPG')
image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

blurred = cv2.blur(image_rgb, (9, 9))

smoothed = cv2.bilateralFilter(image_rgb, d=15, sigmaColor=50, sigmaSpace=50)

gray_original = cv2.cvtColor(image_rgb, cv2.COLOR_RGB2GRAY)
gray_blurred = cv2.cvtColor(blurred, cv2.COLOR_RGB2GRAY)
gray_smoothed = cv2.cvtColor(smoothed, cv2.COLOR_RGB2GRAY)

ssim_original_blurred, _ = ssim(gray_original, gray_blurred, full=True)
ssim_original_smoothed, _ = ssim(gray_original, gray_smoothed, full=True)

print(f'SSIM between original and blurred images: {ssim_original_blurred:.4f}')
print(f'SSIM between original and smoothed images: {ssim_original_smoothed:.4f}')

fig, axs = plt.subplots(1, 3, figsize=(12, 10))

axs[0].imshow(image_rgb)
axs[0].set_title('Original Image')
axs[0].axis('off')

axs[1].imshow(blurred)
axs[1].set_title('Blurred Image')
axs[1].axis('off')

axs[2].imshow(smoothed)
axs[2].set_title('Smoothed Image')
axs[2].axis('off')

plt.tight_layout()
plt.show()


#Program 11

import cv2
import numpy as np
import matplotlib.pyplot as plt

image = cv2.imread('shape.jpg')

gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)


edged = cv2.Canny(gray, 30, 200)


contours, hierarchy = cv2.findContours(edged.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
print("Number of Contours found = " + str(len(contours)))


cv2.drawContours(image, contours, -1, (0, 255, 0), 3)

cropped_images = []


for i, contour in enumerate(contours):
    
    mask = np.zeros_like(gray)
    cv2.drawContours(mask, [contour], 0, 255, -1)
    



    object_extracted = np.zeros_like(image)
    object_extracted[mask == 255] = image[mask == 255]
    # Convert BGR to RGB for displaying with Matplotlib
    object_extracted_rgb = cv2.cvtColor(object_extracted, cv2.COLOR_BGR2RGB)
    # Append the extracted object to the list
    cropped_images.append(object_extracted_rgb)
fig, axs = plt.subplots(1, len(cropped_images)+2, figsize=(12, 4))


axs[0].imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
axs[0].set_title('Original Image')
axs[0].axis('off')

axs[1].imshow(edged, cmap='gray')
axs[1].set_title('Canny Edges')
axs[1].axis('off')

for i in range(len(cropped_images)):
    axs[i+2].imshow(cropped_images[i])
    axs[i+2].set_title(f'Object {i+1}')
    axs[i+2].axis('off')

plt.tight_layout()
plt.show()
Number of Contours found = 3

#Program 12

import cv2
import matplotlib.pyplot as plt


image_path = 'cricket.jpg'
image = cv2.imread(image_path)

face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)


faces = face_cascade.detectMultiScale(gray_image, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))


cropped_faces = []


for (x, y, w, h) in faces:
    cv2.rectangle(image, (x, y), (x+w, y+h), (255, 0, 0), 2)
    cropped_faces.append(image[y:y+h, x:x+w])


plt.figure(figsize=(12, 6))
for i, face in enumerate(cropped_faces):
    plt.subplot(1, len(cropped_faces), i + 1)
    plt.imshow(cv2.cvtColor(face, cv2.COLOR_BGR2RGB))
    plt.axis('off')
    plt.title(f'Face {i + 1}')
plt.tight_layout()
plt.show()


































 
